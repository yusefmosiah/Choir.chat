# Level -1 Documentation



=== File: docs/tree.md ===



==
tree.md
==


# Choir Directory Structure
## Output of $ tree -I 'venv|archive|__pycache__|iOS_Example|dependencies' | pbcopy

.
├── Choir
│   ├── App
│   │   └── ChoirApp.swift
│   ├── Assets.xcassets
│   │   ├── AccentColor.colorset
│   │   │   └── Contents.json
│   │   ├── AppIcon.appiconset
│   │   │   └── Contents.json
│   │   └── Contents.json
│   ├── Choir.entitlements
│   ├── ContentView.swift
│   ├── Coordinators
│   │   ├── MockChorusCoordinator.swift
│   │   └── RESTChorusCoordinator.swift
│   ├── Info.plist
│   ├── Models
│   │   ├── ChoirThread.swift
│   │   ├── ChorusModels.swift
│   │   └── Phase.swift
│   ├── Networking
│   │   └── ChorusAPIClient.swift
│   ├── Preview Content
│   │   └── Preview Assets.xcassets
│   │       └── Contents.json
│   ├── Protocols
│   │   └── ChorusCoordinator.swift
│   ├── Services
│   │   ├── KeychainService.swift
│   │   └── WalletManager.swift
│   ├── ViewModels
│   │   └── ChorusViewModel.swift
│   └── Views
│       ├── ChoirThreadDetailView.swift
│       ├── ChorusCycleView.swift
│       ├── MessageRow.swift
│       ├── Thread
│       │   └── Components
│       │       ├── ThreadInputBar.swift
│       │       └── ThreadMessageList.swift
│       └── WalletView.swift
├── Choir.xcodeproj
│   ├── project.pbxproj
│   ├── project.xcworkspace
│   │   ├── contents.xcworkspacedata
│   │   ├── xcshareddata
│   │   │   └── swiftpm
│   │   │       ├── Package.resolved
│   │   │       └── configuration
│   │   └── xcuserdata
│   │       └── wiz.xcuserdatad
│   │           ├── IDEFindNavigatorScopes.plist
│   │           └── UserInterfaceState.xcuserstate
│   └── xcuserdata
│       └── wiz.xcuserdatad
│           ├── xcdebugger
│           │   └── Breakpoints_v2.xcbkptlist
│           └── xcschemes
│               └── xcschememanagement.plist
├── ChoirTests
│   ├── APIResponseTests.swift
│   ├── ChoirTests.swift
│   ├── ChoirThreadTests.swift
│   └── ChorusAPIClientTests.swift
├── ChoirUITests
│   ├── ChoirUITests.swift
│   └── ChoirUITestsLaunchTests.swift
├── api
│   ├── Dockerfile
│   ├── __init__.py
│   ├── app
│   │   ├── __init__.py
│   │   ├── chorus_cycle.py
│   │   ├── config.py
│   │   ├── database.py
│   │   ├── models
│   │   │   ├── __init__.py
│   │   │   └── api.py
│   │   ├── routers
│   │   │   ├── balance.py
│   │   │   ├── chorus.py
│   │   │   ├── embeddings.py
│   │   │   ├── threads.py
│   │   │   ├── users.py
│   │   │   └── vectors.py
│   │   ├── services
│   │   │   ├── __init__.py
│   │   │   ├── chorus.py
│   │   │   └── sui_service.py
│   │   └── utils.py
│   ├── main.py
│   ├── pyproject.toml
│   ├── pytest.ini
│   ├── requirements.txt
│   ├── run_tests.sh
│   └── tests
│       ├── __init__.py
│       ├── conftest.py
│       ├── test_chorus_endpoints.py
│       ├── test_core_endpoints.py
│       ├── test_main.py
│       ├── test_response_schemas.py
│       ├── test_structured_outputs.py
│       ├── test_sui_service.py
│       └── test_user_thread_endpoints.py
├── choir_coin
│   └── choir_coin
│       ├── Move.lock
│       ├── Move.toml
│       ├── build
│       │   └── choir
│       │       ├── BuildInfo.yaml
│       │       ├── bytecode_modules
│       │       │   ├── choir.mv
│       │       │   └── choir_tests.mv
│       │       ├── source_maps
│       │       │   ├── choir.json
│       │       │   ├── choir.mvsm
│       │       │   ├── choir_tests.json
│       │       │   └── choir_tests.mvsm
│       │       └── sources
│       │           ├── choir.move
│       │           └── choir_tests.move
│       ├── sources
│       │   └── choir_coin.move
│       └── tests
│           └── choir_coin_tests.move
├── docker-compose.yml
├── docs
│   ├── CHANGELOG.md
│   ├── core_core.md
│   ├── core_economics.md
│   ├── core_state_transitions.md
│   ├── data_engine_model.md
│   ├── e_business.md
│   ├── e_concept.md
│   ├── evolution_naming.md
│   ├── evolution_token.md
│   ├── levels
│   │   ├── all.txt
│   │   ├── level-1.md
│   │   ├── level0.md
│   │   ├── level1.md
│   │   ├── level2.md
│   │   ├── level3.md
│   │   ├── level4.md
│   │   ├── level5.md
│   │   └── level_organization.md
│   ├── plan_anonymity_by_default.md
│   ├── plan_identity_as_a_service.md
│   ├── scripts
│   │   ├── combiner.sh
│   │   └── update_tree.sh
│   └── tree.md
└── render.yaml

48 directories, 107 files

=== File: docs/CHANGELOG.md ===



==
CHANGELOG.md
==


# Changelog

## [2025-02-23] - 2025-02-23

### Changed

- Documented quantum anharmonic oscillator model implementation and dynamic stake pricing mechanism via an effective anharmonic coefficient modulated by approval/refusal statistics.

## [Unreleased]

### Changed

- Updated all documentation to version 6.0
  - Transformed structured documentation into fluid prose
  - Relaxed event-driven architecture requirements for initial TestFlight
  - Clarified implementation priorities and post-funding features
  - Maintained theoretical frameworks while focusing on core functionality

### Added

- Initial Chorus cycle working in iOS simulator
  - Basic message flow through phases
  - Response handling
  - State management

### Documented

- Created 15 comprehensive issues covering:
  - Core message system implementation
  - Type reconciliation with Qdrant
  - API client updates
  - Coordinator message flow
  - User identity management
  - Thread state management
  - Integration testing
  - Error handling strategy
  - Performance monitoring
  - State recovery
  - Thread sheet implementation
  - Thread contract implementation
  - Message rewards system
  - LanceDB migration
  - Citation visualization

### Architecture

- Defined clear type system for messages
- Planned migration to LanceDB
- Structured multimodal support strategy

### Technical Debt

- Identified areas needing more specification:
  - Thread Sheet UI (marked as "AI SLOP")
  - Reward formulas need verification
  - Migration pipeline needs careful implementation

## [0.4.2] - 2024-11-09

### Added

- Development principles with focus on groundedness
- Basic chat interface implementation
- SwiftData message persistence
- Initial Action step foundation

### Changed

- Shifted to iterative, ground-up development approach
- Simplified initial implementation scope
- Focused on working software over theoretical architecture
- Adopted step-by-step Chorus Cycle implementation strategy

### Principles

- Established groundedness as core development principle
- Emphasized iterative growth and natural evolution
- Prioritized practical progress over theoretical completeness
- Introduced flexible, evidence-based development flow

## [0.4.1] - 2024-11-08

### Added

- Self-creation process
- Post-training concepts
- Concurrent processing ideas
- Democratic framing
- Thoughtspace visualization

### Changed

- Renamed Update to Understanding
- Enhanced step descriptions
- Refined documentation focus
- Improved pattern recognition

## [0.4.0] - 2024-10-30

### Added

- Swift architecture plans
- Frontend-driven design
- Service layer concepts
- Chorus cycle definition

### Changed

- Enhanced system architecture
- Refined core patterns

## [0.3.5] - 2024-09-01

- Choir.chat as a web3 dapp
- messed around with solana
- used a lot of time messing with next.js/react/typescript/javascript
- recognized that browser extension wallet is terrible ux

## [0.3.0] - 2024-03-01

### Added

- ChoirGPT development from winter 2023 to spring 2024

- First developed as a ChatGPT plugin, then a Custom GPT
- The first global RAG system / collective intelligence as a GPT

## [0.2.10] - 2023-04-01

### Added

- Ahpta development from winter 2022 to spring 2023

## [0.2.9] - 2022-04-01

### Added

- V10 development from fall 2021 to winter 2022

## [0.2.8] - 2021-04-01

### Added

- Elevisio development from spring 2020 to spring 2021

## [0.2.7] - 2020-04-01

### Added

- Bluem development from spring 2019 to spring 2020

## [0.2.6] - 2019-04-01

### Added

- Blocstar development from fall 2018 to spring 2019

## [0.2.5] - 2018-04-01

### Added

- Phase4word development from summer 2017 to spring 2018

### Changed

- Showed Phase4word to ~50 people in spring 2018, received critical feedback
- Codebase remains in 2018 vintage

## [0.2.0] - 2016-06-20

### Added

- Phase4 party concept
- Early democracy technology
- Initial value systems

### Changed

- Moved beyond truth measurement framing
- Refined core concepts

## [0.1.0] - 2015-07-15

### Added

- Initial simulation hypothesis insight
- "Kandor"
- Quantum information concepts
- Planetary coherence vision
- Core system ideas
# Level 0 Documentation


# Level 1 Documentation



=== File: docs/core_core.md ===



==
core_core
==


# Core System Overview

VERSION core_system: 6.0

Note: This document describes the core system architecture, with initial focus on TestFlight functionality. More sophisticated event-driven mechanisms described here will be implemented post-funding.

The Choir system is built around a clear hierarchy of truth and state management. At its foundation, the blockchain serves as the authoritative source for all ownership and economic state – thread ownership, token balances, message hashes, and co-author lists. This ensures that the economic model, with its harmonic equity distribution and quantum anharmonic thread evolution (where dynamic stake pricing is driven by approval/refusal feedback), has an immutable and verifiable foundation.

Alongside the blockchain, Qdrant acts as the authoritative source for all content and semantic relationships. It stores the actual message content, embeddings, and the growing network of citations and semantic links. This separation of concerns allows the system to maintain both economic integrity through the blockchain and rich semantic relationships through the vector database.

The AEIOU-Y chorus cycle sits at the heart of the interaction model, processing user input through a series of well-defined steps. The cycle begins with pure response in the Action step, enriches it with prior knowledge in the Experience step, aligns with user intent in the Intention step, records semantic connections in the Observation step, decides on continuation in the Update step, and produces the final response in the Yield step.

State updates flow naturally between these components. When a user submits input, the system coordinates necessary updates across the UI, blockchain, and vector store. The chorus cycle processes the input while maintaining system state consistency. These state changes are carefully managed to maintain data integrity and system coherence.

The economic model employs QAHO-based dynamics: the base stake price increases when a thread receives many refusals (via an uptick in an effective anharmonic coefficient, K₀) and decreases with strong approval—thus naturally filtering quality. Equity is distributed according to harmonic formulas, ensuring fair value attribution while maintaining mathematical elegance.

The knowledge system builds a growing semantic network through citations and prior references. Each message can reference previous messages as priors, creating a web of semantic relationships. These relationships are stored in Qdrant and help inform future responses through the Experience step of the chorus cycle.

State management follows the natural hierarchy of truth. The chain state is authoritative for ownership and economics. The vector state is authoritative for content and semantics. Local state serves only to coordinate UI updates and handle temporary synchronization needs. This clear hierarchy ensures system consistency while enabling responsive user interaction.

All of this is implemented using Swift's modern concurrency system. Async/await enables clean asynchronous code. Structured concurrency through task groups ensures proper resource management. The architecture maintains loose coupling between components while ensuring system coherence.

The result is a system that combines economic incentives, semantic knowledge, and natural interaction patterns into a coherent whole. The blockchain provides economic integrity. The vector database enables semantic richness. The chorus cycle creates natural interaction. And Swift's concurrency model keeps it all running smoothly and safely.

This architecture enables the system to evolve naturally. The semantic network grows organically through usage. The economic model creates emergent quality barriers. And the whole system maintains consistency through its clear hierarchy of truth and well-defined state management patterns.

=== File: docs/core_economics.md ===



==
core_economics
==


# Core Economic Model

VERSION core_economics: 6.0

The economic model operates as a quantum anharmonic system, anchored by the Move Virtual Machine as its source of truth. The model orchestrates value flows through stake dynamics modulated by collective feedback signals.

At its foundation, the system tracks economic events through the blockchain. These events capture stake movements, anharmonic coefficient adjustments, equity distributions, and reward issuance. Each event carries a unique identifier, precise timestamp, and rich metadata that ensures perfect traceability.

The chain state manager serves as the authoritative bridge between the economic model and the blockchain. It retrieves thread economics directly from smart contracts, maintaining an accurate view of stake prices, anharmonic coefficients, token balances, and equity distributions. All economic transactions flow through this manager, ensuring that on-chain state changes trigger appropriate event cascades throughout the system.

The model's core strength lies in its quantum anharmonic calculations. The base price follows a λx²m oscillator model:

P₀ = S₀[(2n+1) + (K₀λ)^{1/(m+1)}]

Where:

- K₀ = Baseline anharmonic coefficient from QAHO theory (e.g. table 1 values), which in practice is modulated by approval/refusal statistics.
  (Higher refusal rates boost the effective K₀, thereby increasing the required stake price.)
- m = Potential order (default quartic: m = 2; sextic m = 3, etc)
- n = Excitation level (capturing thread complexity/activity)

Equity distribution follows a square root law reflecting quantum amplitude principles:

E(s) = (1/N) \* √(s/P₀)

This formula elegantly balances the number of co-authors N with the stake amount s, normalized by the base price P₀, ensuring fair value distribution across participants.

The economic handler processes these events through a carefully orchestrated flow. When stake is deposited, it calculates new equity shares based on the current anharmonic coefficient and organizational frequency. Collective feedback triggers stake price recalculations that maintain system equilibrium. Each event flows through the handler, ensuring proper economic state transitions.

Analytics and monitoring provide real-time insight into the economic system's health. The system tracks stake movements, K₀ adjustments, equity distributions, and reward issuance. This data feeds back into the system, enabling natural price discovery and value distribution.

The economic model's strength emerges from several key principles. The blockchain serves as the immutable source of truth, while value flows follow strict conservation laws. Price discovery emerges naturally through anharmonic eigenvalue patterns, and state changes propagate through quantized energy transitions. Most importantly, complex economic behaviors arise organically from these simple underlying rules.

Through this careful balance of blockchain authority, mathematical precision, and natural value flows, the economic model creates a self-sustaining ecosystem for knowledge work. The system's elegance lies in how these principles work together, creating a robust economic framework that adapts and evolves while maintaining fundamental stability.

=== File: docs/core_state_transitions.md ===



==
core_state_transitions
==


# Core State Transitions

VERSION core_state_transitions: 6.0

The state transition system orchestrates the evolution of thread states through carefully defined transformations. These transitions follow precise mathematical principles that ensure energy conservation, dynamic stake recalibration, and frequency coherence across the network.

Thread Creation establishes the initial quantum state. Each new thread begins at ground state energy (E = 0), with an initial baseline anharmonic coefficient (K₀_base) and base frequency ω₀. The creator's address becomes the first co-author, and the thread maintains an empty set of message hashes. This ground state provides a stable foundation for future evolution.

Message Submission follows quantum anharmonic energy principles. The required stake follows E(n) = (2n+1) + (K₀λ)^(1/(m+1)), where K₀ reflects the thread's approval-refusal history. Each message generates a unique hash and carries its quantized energy contribution to the thread.

Approval Processing drives state evolution through three possible outcomes. In the case of rejection, the effective anharmonic coefficient (and thus the required stake price) increases—the stake amount is incorporated into the thread's "energy" state. The system recalculates P₀ using our QAHO-based formula and a dynamically raised K₀ (reflecting a higher refusal ratio). For split decisions, energy divides between treasury and thread based on voter distribution. If there are A approvers and D deniers out of V total voters, the treasury receives (stake × A)/V while the thread receives the remainder. When approved, energy distributes to approvers while preserving the total. The author joins as a co-author, and the stake parameters recalibrate according to the updated co-author count, while frequency evolves to reflect the enhanced organizational coherence.

Dynamic Stake Evolution follows principles inspired by QAHO behavior. Instead of relying on a passive dissipation mechanism, the required stake price P₀ stabilizes over time as the effective anharmonic coefficient (K₀) is continuously recalibrated based on recent approval/refusal statistics. In this way, threads with sustained high disapproval maintain higher stake thresholds, while well-supported threads see their stake prices relax.

Frequency Management reflects collective organization through coupled oscillators. The thread frequency evolves through three interacting modes: the message mode normalizes activity rate by the square root of co-author count, the value mode applies logarithmic scaling to energy per co-author, and the coupling strength maintains an inverse relationship with co-author count. These modes work together to create natural organizational rhythms.

The reward system operates through precisely defined state transitions. New message rewards follow a time-based decay described by R(t) = R_total × k/(1 + k·t_period), where k represents the decay constant (2.04) and t_period spans the total time period of four years. Prior citation rewards strengthen thread coupling by drawing from treasury balance based on quality score ratios, expressed as V(p) = B_t × Q(p)/∑Q(i). Citations create frequency coupling between threads, with each thread's frequency increasing by 5% of the other's frequency. Treasury management maintains system solvency through careful balance tracking, where split decisions increase the balance, prior rewards decrease it, and system rewards add to it, all while maintaining a minimum balance for stability.

The system's core properties maintain stability through:

1. Energy conservation in all transitions
2. Stake price coherence via K₀ feedback loops
3. Frequency alignment through organizational coupling

Error handling ensures transition validity through multiple safeguards. Energy conservation violations trigger immediate rejection. Stake price instability blocks updates until K₀ recalibration completes. Frequency decoherence blocks transitions that would disrupt organizational patterns. Phase transition failures maintain the previous state to ensure system stability.

Through these precisely defined transitions, the system maintains quantum anharmonic stability while enabling organic evolution of thread states. The careful balance of energy conservation, dynamic stake pricing, and frequency alignment creates a robust framework for organic growth and adaptation.

#### New Consideration: Dynamic Stake & Frequency Evolution

The evolution of the thread's "energy state" is now governed by quantum anharmonic principles:

• The effective stake price P₀ is recalculated via:

P₀ = S₀[(2n+1) + (K₀λ)^(1/(m+1))]

where K₀ is dynamically adjusted based on the ratio of refusals to approvals.

• Likewise, frequency evolution reflects changes in the thread's organizational coherence—adjusting as more energy (stake) is required or released, following a proportional relation akin to:

ω_new = ω_old \* √(1 + ΔE/E_total)

These modifications ensure that energy conservation and dynamic adjustment remain integral while fully dispensing with the outdated thermal metaphor.
# Level 2 Documentation



=== File: docs/e_business.md ===



==
e_business
==


# Choir Business Model

Choir's business model aligns with its natural principles - value flows efficiently, quality emerges organically, and growth happens sustainably. Rather than extracting value through advertising or data mining, we enable and strengthen natural value creation.

Our core revenue model operates on a thoughtfully designed freemium approach that grows naturally with teams. The free tier establishes a strong foundation, enabling thread participation, co-authorship, basic message submission and approval, thread visibility to co-authors, standard resource allocation, and natural team formation. Building on this foundation, our premium tier ($30/month or $200/year) enhances the natural flow of work through bonus rewards, increased resource allocation, priority message processing, advanced team analytics, and enhanced privacy controls. Premium benefits grow yearly, amplifying natural value creation rather than restricting basic functionality.

Value creation flows through multiple interconnected layers in the platform. At the individual level, participants receive immediate recognition for quality contributions, earn direct rewards for good judgment, build natural reputation through participation, and gain growing resource allocations. Teams benefit from collective value accumulation in threads, shared success through citations, natural team formation processes, and enhanced capabilities through premium features. At the network layer, knowledge networks form organically, value flows across threads, ecosystems develop naturally, and collective intelligence emerges from these interactions.

Resource allocation follows natural principles across three key dimensions. Processing resources scale AI model access with usage, prioritize premium members, enable teams to share growing allocations, and maintain natural load balancing. Storage resources preserve thread history, grow team allocations over time, offer premium backup options, and follow natural archival patterns. Network resources provide real-time updates, priority synchronization, enhanced team features, and optimize natural flows.

The platform grows through natural amplification mechanisms. Quality emerges as better contributions attract attention, teams form around excellence, value accumulates naturally, and growth follows genuine patterns. Network effects strengthen the ecosystem as teams enhance threads, threads strengthen networks, networks attract participation, and value flows efficiently. Resource evolution supports this growth as individual allocations expand yearly, team capabilities grow, network capacity increases, and scaling follows natural patterns.

Business sustainability flows from revenue streams aligned with value creation. Direct revenue comes from premium subscriptions, team features, enhanced capabilities, and growing allocations. Indirect value emerges through quality content datasets, knowledge network formation, team collaboration patterns, and collective intelligence emergence. System health maintains through sustainable resource usage, natural load distribution, efficient value flow, and organic growth patterns.

The future evolution of our model will unfold naturally. Team features will expand to include enhanced collaboration tools, advanced analytics, custom workflows, and natural team support. Knowledge tools will develop to enable network visualization, pattern recognition, insight emergence, and collective intelligence. Resource growth will continue through expanding allocations, new capabilities, team-specific features, and natural evolution.

Our implementation strategy follows natural patterns through three phases. The foundation phase establishes core functionality, basic premium features, natural team support, and essential analytics. The enhancement phase introduces advanced team features, network tools, enhanced analytics, and growing capabilities. The evolution phase enables custom team solutions, network intelligence, emergent features, and natural expansion.

Success metrics reflect our natural approach. Quality metrics track team formation rates, citation patterns, value accumulation, and natural growth. Health metrics monitor resource efficiency, value flow patterns, system coherence, and sustainable growth. Evolution metrics measure feature emergence, capability growth, network effects, and natural scaling.

Through this model, Choir maintains sustainable business operations while enabling natural value creation at all scales. We grow by strengthening the natural flows of quality, collaboration, and collective intelligence. Join us in building a platform where business success aligns perfectly with user value creation - where growth comes from enabling natural patterns of collaboration and knowledge sharing rather than artificial engagement metrics or data extraction.

Thread stake prices rise in response to rejections and fall with approvals—following a quantum anharmonic oscillator model. In this scheme, the effective anharmonic coefficient (K₀) is increased when refusals accumulate, resulting in higher stake requirements, and conversely, strong approval lowers the cost barrier. This dynamic pricing creates natural quality barriers.

=== File: docs/e_concept.md ===



==
e_concept
==


# Choir: Harmonic Intelligence Platform

At its heart, Choir represents a revolutionary communication platform where value flows like energy through a natural system. Just as rivers find their paths and crystals form their patterns, quality content and collaborative teams emerge through natural principles rather than forced rules.

The platform operates through three fundamental flows that shape its natural value dynamics. Individual recognition happens organically - when someone contributes valuable insight, the recognition manifests immediately and tangibly. Like a clear note resonating through a concert hall, quality contributions naturally attract attention and rewards without needing arbitrary upvotes or likes. Value recognition emerges naturally through participation and stake.

Team crystallization follows similar natural patterns. As valuable conversations develop, they naturally attract compatible minds. Like crystals forming in solution, teams emerge not through top-down organization but through natural alignment of interests and capabilities. Each thread becomes a shared space that accumulates value for all participants, creating natural bonds between contributors.

Knowledge networks complete the value flow system. When threads reference each other, they create flows of value between communities. Like a network of streams feeding into rivers and eventually oceans, knowledge and value flow through the system, creating rich ecosystems of understanding. Each citation strengthens both source and destination, building a web of interconnected knowledge.

The system evolves through natural phases that mirror physical processes. In the early stage, new threads bubble with activity and possibility, like a hot spring. The energy runs high, stakes are elevated, and participation requires confidence - creating a natural barrier that ensures quality from the start. As threads mature, they "cool" into more stable states, like a river finding its course. The flow becomes more predictable, with stakes moderating to make participation more accessible while maintaining quality through established patterns. Finally, mature threads develop clear structures, like crystalline formations, where teams coalesce around valuable patterns, knowledge networks form clear topologies, and value accumulates in stable, beautiful ways.

Unlike traditional platforms that extract value, Choir creates spaces where value naturally accumulates through multiple channels. Threads act as resonant cavities, accumulating energy through quality interactions. Denials strengthen the thread itself rather than being wasted, teams share in their thread's growing value, and natural incentives align toward quality. Network value grows as citations create flows between threads, knowledge networks emerge organically, teams build on each other's work, and system-wide coherence develops naturally. The treasury maintains sustainable value flow by capturing split decisions and funding ongoing citations, enabling perpetual rewards that benefit the entire ecosystem.

Dynamic stake evolution creates natural quality filters. Threads that accumulate many refusals (thereby increasing the effective anharmonic coefficient) demand elevated stakes, while those with strong approval enable lower-cost participation. This mechanism—rooted in quantum anharmonic oscillator principles—ensures that value is distributed in proportion to the quality of contributions.

The future vision of Choir enables a new kind of collaborative intelligence. Natural teams form around resonant ideas, share in collective value, build on each other's work, and evolve sustainably. Knowledge networks connect naturally through citations, strengthen through use, create emergent insights, and enable collective intelligence. Value creation emerges from natural patterns, accumulates in stable forms, flows efficiently, and benefits all participants.

This represents just the beginning of Choir's potential. As the system evolves, we'll discover new patterns of collaboration, new forms of value creation, and new ways for teams to work together. The key lies in our approach - rather than forcing these patterns, we create the conditions for them to emerge naturally.

Join us in building a platform where quality emerges through natural principles, teams form through genuine alignment, and value flows to those who create it. Together, we can enable new forms of collective intelligence that benefit everyone, creating a truly harmonious system of collaboration and knowledge sharing.

=== File: docs/evolution_naming.md ===



==
evolution_naming
==


==
evolution_naming.md
==

# From RAG to Post Chain: A Name's Evolution, a System's Identity

VERSION evolution_naming: 7.0

The journey of Choir's core mechanism, from a simple concept to its current form, mirrors the evolution of the platform itself. Each name change reflects a deeper understanding, a refinement of purpose, a shift in perspective. It's a story of emergence, where the name didn't just describe the system, but helped shape it.

It began with **RAG - Retrieval-Augmented Generation**. A functional description, accurate yet sterile. It spoke to the technical process but lacked the spark of life, the hint of something more. RAG was about retrieving information; it wasn't yet about generating understanding.

Then came **Vowel Loop**, a name born from the observation of linguistic patterns, the AEIOU and sometimes Y. It was playful, memorable, but perhaps too niche, too focused on a specific detail. It hinted at the importance of language but didn't capture the broader scope. Still, it was a step towards recognizing the system's unique relationship with language.

**Chorus Cycle** arrived next, a name that resonated with the platform's core philosophy. It evoked collaboration, harmony, the interplay of voices. It described the iterative process, the six phases of refinement. But it was also complex, potentially intimidating. It focused on the process, but perhaps not enough on the outcome.

And so, we arrive at **Post Chain**. A name that is both simple and profound. "Post" speaks to the fundamental unit of interaction, the message, the contribution. "Chain" evokes connection, sequence, the building of knowledge over time. It hints at the blockchain foundation, the "chain of thought" reasoning, the causal chain of events.

**Post Chain** is more than just a name; it's a statement of intent. It's about creating a system where each post is a link in a larger chain, where individual contributions connect to form a collective intelligence. It's about building a platform where knowledge is not just retrieved but generated, where meaning is not just found but created.

The shift from Chorus Cycle to Post Chain also marks a crucial conceptual evolution. It's a move from a focus on process to a focus on outcome. The phases are still there, the underlying mechanisms remain, but they are now implicit, not explicit. The emphasis is on the chain of posts, the interconnectedness of ideas, the emergent intelligence.

This evolution is not merely semantic. It reflects a deeper understanding of the system's core principles, a refinement of its purpose, a recognition of its potential. **Post Chain** is the name that embodies the platform's essence: a simple, powerful, and elegant system for building collective intelligence, one post at a time. It is easy to say, and means what it says. It is direct.

This document will be integrated into **Level 1: Basic Mechanics**, as it describes the evolution of the core interaction model.

=== File: docs/evolution_token.md ===



==
evolution_token
==


==
evolution_token.md
==

# The Evolution of CHIP: Beyond Utility

VERSION evolution_token: 7.0

The CHIP token has transcended its initial conception as a mere utility token. It has evolved into something more profound: a representation of value, participation, and ownership within the Choir ecosystem. This document details the evolution of CHIP's role and its significance in the Post Chain paradigm.

**Beyond Utility:** The term "utility token" often implies a limited scope, a token whose value is solely derived from its use within a specific platform. CHIP, however, has grown beyond this narrow definition. It is not simply a means to access features or perform actions; it is a fundamental component of the platform's value proposition.

**A Stake in the Data Union:** CHIP represents a share in the collective intelligence of Choir, a stake in the data union. This ownership model empowers users, giving them a voice in the platform's governance and a share in its success. It's a departure from the extractive models of traditional platforms, where users are merely sources of data.

**The Poker Chip Analogy:** The analogy to poker chips is apt, but it's more than just a metaphor. CHIP, like a poker chip, represents a commitment, a willingness to engage in the game. However, unlike poker, Choir is not a zero-sum game. It's a positive-sum environment where collaboration and knowledge creation benefit all participants.

**The Liminal Space:** CHIP exists in the liminal space between a currency and an equity. It's not intended as a general-purpose medium of exchange, but it holds value beyond its immediate utility. It represents a "bet" on the future of Choir, an investment in the potential of collective intelligence.

**ICM and Long-Term Value:** The Independent Chip Model (ICM) from poker provides a useful framework for understanding CHIP's value dynamics. Just as ICM encourages players to focus on long-term expected value, CHIP incentivizes contributions that enhance the platform's overall worth, not just short-term gains.

**Beyond Speculation:** By emphasizing CHIP's role in participation, value representation, and ownership, we discourage the kind of speculative behavior that plagues many cryptocurrencies. CHIP is designed to be a tool for building and sharing knowledge, not a get-rich-quick scheme.

**Implications for the Future:**

- **New Economic Models:** CHIP's evolution points towards new economic models for online platforms, where users are not just consumers but also owners and stakeholders.
- **Decentralized Governance:** CHIP could play a key role in the decentralized governance of Choir, giving users a direct voice in shaping the platform's future.
- **Value Alignment:** The tokenomics of CHIP are designed to align the incentives of users, developers, and the platform itself, creating a virtuous cycle of growth and innovation.

The evolution of CHIP from a utility token to a multifaceted representation of value and participation is a testament to the dynamic and emergent nature of the Choir platform. It reflects a deeper understanding of the relationship between technology, economics, and human collaboration.

This document will be integrated into **Level 2: Core Mechanics**, as it describes the fundamental role of the CHIP token in the platform's economy and incentive structure.

=== File: docs/plan_anonymity_by_default.md ===



==
plan_anonymity_by_default
==


==
anonymity_by_default.md
==

# Anonymity by Default: A Core Principle of Choir

VERSION anonymity_by_default: 7.0

Anonymity is not just a feature of Choir; it's a fundamental principle, a design choice that shapes the platform's architecture and informs its values. By making anonymity the default state for all users, Choir prioritizes privacy, freedom of expression, and the creation of a space where ideas are judged on their merits, not on the identity of their author.

**Core Tenets:**

1. **Privacy as a Fundamental Right:** Choir recognizes that privacy is a fundamental human right, essential for individual autonomy and freedom of thought. Anonymity protects users from surveillance, discrimination, and the potential chilling effects of being constantly identified and tracked online.
2. **Freedom of Expression:** Anonymity fosters a space where users can express themselves freely, without fear of judgment or reprisal. This is particularly important for discussing sensitive topics, challenging প্রচলিত norms, or exploring unconventional ideas.
3. **Focus on Ideas, Not Identities:** By separating ideas from their authors, anonymity encourages users to evaluate contributions based on their intrinsic value, rather than on the reputation or status of the contributor. This promotes a more meritocratic and intellectually rigorous environment.
4. **Protection from Bias:** Anonymity can help to mitigate the effects of unconscious bias, such as those based on gender, race, or other personal characteristics. It allows ideas to be judged on their own merits, rather than through the lens of preconceived notions about the author.
5. **Lower Barrier to Entry:** Anonymity makes it easier for new users to join the platform and start contributing, as they don't need to go through a complex verification process or share personal information.

**How Anonymity Works on Choir:**

- **Default State:** All users are anonymous by default upon joining the platform. They can interact, contribute content, and earn CHIP tokens without revealing their real-world identity.
- **Unique Identifiers:** Users are assigned unique, randomly generated identifiers that allow them to build a consistent presence on the platform without compromising their anonymity.
- **No Personal Data Collection:** Choir does not collect or store any personally identifiable information about anonymous users.
- **"Priors" and Anonymity:** The "priors" system, which shows the lineage of ideas, maintains anonymity by design. It reveals the connections between ideas, not the identities of the individuals who proposed them.

**Balancing Anonymity with Accountability:**

- **CHIP Staking:** The requirement to stake CHIP tokens to post new messages acts as a deterrent against spam and malicious behavior, even for anonymous users.
- **Community Moderation:** The platform relies on community moderation to maintain the quality of discourse and address any issues that arise.
- **Reputation Systems:** While users are anonymous by default, they can still build reputations based on the quality of their contributions, as tracked through the "priors" system and potentially through community ratings.

**The Value of Anonymity in a High-Information Environment:**

- **Encourages Honest Discourse:** Anonymity can encourage more honest and open discussions, particularly on sensitive or controversial topics.
- **Promotes Intellectual Risk-Taking:** Users may be more willing to take intellectual risks and explore unconventional ideas when they are not worried about the potential repercussions for their personal or professional lives.
- **Facilitates Whistleblowing and Dissent:** Anonymity can provide a safe space for whistleblowers and those who wish to express dissenting views without fear of retaliation.
- **Protects Vulnerable Users:** Anonymity can be particularly important for users in marginalized or vulnerable communities who may face risks if their identities are revealed.

**Conclusion:**

Anonymity by default is a core design principle of Choir, one that reflects the platform's commitment to privacy, freedom of expression, and the creation of a truly meritocratic space for the exchange of ideas. It's a bold choice in a world where online platforms increasingly demand real-name identification, but it's a choice that has the potential to unlock new levels of creativity, honesty, and collective intelligence. By prioritizing anonymity, Choir is not just building a platform; it's building a new model for online interaction, one that empowers individuals and fosters a more open and equitable exchange of ideas.

This document will be integrated into **Level 1: Basic Mechanics**, as it describes a fundamental aspect of how users interact with the platform and each other. It also connects to **Level 3: Value Creation**, as anonymity is a key value proposition for many users, particularly those concerned about privacy and freedom of expression.

=== File: docs/plan_identity_as_a_service.md ===



==
plan_identity_as_a_service
==


# Identity as a Service (IDaaS)

VERSION identity_service: 7.1

Identity on Choir is optional yet valuable. By default, users can participate anonymously, preserving privacy and free expression. However, those who opt into KYC-based verification unlock the ability to participate in binding governance decisions, operate Social AI (SAI) agents under their account, and gain additional social trust signals. This document explains how Identity as a Service (IDaaS) fits into the Choir platform.

---

## Overview

Traditional online platforms typically force users to accept a real-name policy or harvest personal data without explicit consent. Choir takes a different stance:

• **Default Anonymity**: Everyone can read messages, post anonymously, and earn CHIP tokens without providing personal data.
• **Paid Identity**: Those requiring the social or governance benefits of verified status can pay for IDaaS, enabling official KYC-based identity on the platform.

The result is a tiered approach that preserves anonymity for casual or privacy-conscious users, while offering valuable identity features to those who want or need them.

---

## Core Principles

1. **Anonymity First**: No user is required to reveal their personal information to use the basic features of Choir.
2. **Paid Identity**: Identity verification introduces real-world accountability and signals commitment to the community.
3. **Signaling, Not Pay-to-Win**: Verified status does not grant better content visibility—it grants governance participation, the ability to run SAIs, and optional social credibility.
4. **Jurisdictional Compliance**: KYC standards vary globally, so IDaaS is flexible enough to accommodate region-specific regulations.
5. **Privacy Respect**: Despite verification, Choir stores personally identifying information offline and only retains essential proofs on-chain.

---

## Benefits of Verified Identity

- **Governance Participation**: Only verified users can submit binding on-chain votes in futarchy or other proposals.
- **SAI Operator Verification**: KYC ensures that an AI-driven account is mapped to a real individual for accountability.
- **Jurisdictional Compliance**: Verification aligns Choir with relevant regulations, which is critical for the platform’s long-term viability.

Additionally, verified accounts may enjoy intangible benefits like higher reputational trust within the community, though this is a social dynamic rather than a platform-engineered outcome.

---

## IDaaS Workflow

1. **Voluntary Enrollment**: You choose if/when to enroll in IDaaS.
2. **KYC Process**: Provide a government-issued ID or other documentation; a third-party service verifies authenticity.
3. **On-Chain Confirmation**: A non-reversible cryptographic link is posted on-chain (no personally identifying information, just proof of verification).
4. **Subscription or One-Time Fee**: Payment for IDaaS can be structured as recurring or one-time.
5. **Privileges Granted**: The verified user can now vote in binding governance proposals, run SAI agents, and optionally display a verified badge or signal in UI.

---

## Use Cases

- **Governance**: Ensuring that major decisions are made by real individuals with accountability.
- **SAI Execution**: Operating advanced AI software that can influence the platform, under the direct responsibility of a verified user.
- **Enterprise Collaboration**: In corporate settings, having verified internal team members fosters trust and ensures compliance with company or legal requirements.

---

## Monetization and Sustainability

Because IDaaS revenues support the system’s operational costs, they help offset free-tier usage by anonymous participants. This aligns the business model, ensuring that those who need additional capabilities also help fund the platform’s continued growth and stability.

---

## Conclusion

By offering Identity as a Service, Choir establishes a nuanced balance: anonymity remains a core value and default, while verified identity is treated as a premium feature. This approach ensures that governance decisions are accountable, advanced AI operations remain traceable to real individuals, and the platform remains compliant with jurisdictional regulations. Through IDaaS, Choir invites each user to choose the identity model that suits their needs, forging a new path forward for responsible digital communities.
# Level 3 Documentation


# Level 4 Documentation



=== File: docs/data_engine_model.md ===



==
data_engine_model
==


# Ideal Data Engine Theory

VERSION data_engine: 6.0

The ideal data engine emerged as a theoretical framework while exploring how to generate the highest quality training data for artificial intelligence. Rather than starting with computational requirements or algorithmic efficiency, we asked a more fundamental question: what would a system optimized purely for generating intelligence look like?

The answer revealed itself through an unexpected convergence of economic mechanisms and semantic patterns. A true intelligence engine, we discovered, would treat discourse not as content to be processed but as a generative field where meaning emerges through interaction. Each conversation becomes a semantic event that can increase the density of understanding in the system.

This insight led to Choir's core innovation: tokens that represent genuine intellectual contribution. As threads become more semantically dense and contextually rich, they generate more value. Citations create knowledge networks. Teams form around resonant patterns of understanding. The system naturally evolves toward higher states of collective intelligence.

What makes this approach profound is how it aligns economic incentives with the generation of meaning. Value isn't imposed externally but emerges from the semantic density of interactions. The system rewards depth over volume, nuance over noise, intellectual rigor over viral spread—not through arbitrary rules but through its fundamental architecture.

We're discovering that intelligence generation follows principles as fundamental as thermodynamics. Just as heat flows from high to low temperature, meaning flows through semantic gradients. Just as energy is conserved in physical systems, value is conserved in semantic networks. These aren't mere metaphors but hints at deeper patterns in how collective intelligence emerges.

Choir represents our first attempt to build a system aligned with these principles. We're not just collecting data or optimizing engagement—we're creating conditions for intelligence to emerge naturally through discourse. The implications extend far beyond artificial intelligence, suggesting new ways of understanding how knowledge and value co-evolve in complex systems.

This is just the beginning of understanding how intelligence emerges in networked systems. The ideal data engine isn't a final answer but a framework for asking better questions about the nature of collective intelligence and its relationship to value creation. In our revised approach, the engine harnesses a QAHO-inspired model to quantify energy and value flows. This model eschews thermal analogies—instead, stake pricing adapts through discrete, approval-driven adjustments to the anharmonic coefficient, ensuring that quality (as measured through collective decision outcomes) directly influences value creation.
# Level 5 Documentation


